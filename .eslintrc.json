{
  "root": true,
  "env": {
    "node": true,
    "es2022": true
  },
  "extends": [
    "eslint:recommended",
    "@typescript-eslint/recommended",
    "@typescript-eslint/recommended-requiring-type-checking"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2022,
    "sourceType": "module",
    "project": ["./tsconfig.json"],
    "tsconfigRootDir": "."
  },
  "plugins": [
    "@typescript-eslint",
    "import",
    "security",
    "node"
  ],
  "rules": {
    // TypeScript specific rules
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-unsafe-assignment": "warn",
    "@typescript-eslint/no-unsafe-member-access": "warn",
    "@typescript-eslint/no-unsafe-call": "warn",
    "@typescript-eslint/no-unsafe-return": "warn",
    "@typescript-eslint/prefer-nullish-coalescing": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/no-non-null-assertion": "warn",
    "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "prefer": "type-imports"
      }
    ],
    "@typescript-eslint/no-import-type-side-effects": "error",
    "@typescript-eslint/strict-boolean-expressions": "off",
    "@typescript-eslint/prefer-readonly": "error",
    "@typescript-eslint/prefer-readonly-parameter-types": "off",
    "@typescript-eslint/array-type": ["error", { "default": "array-simple" }],
    "@typescript-eslint/member-ordering": [
      "error",
      {
        "default": [
          "static-field",
          "instance-field",
          "static-method",
          "instance-method"
        ]
      }
    ],

    // Import rules
    "import/order": [
      "error",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index",
          "type"
        ],
        "newlines-between": "always",
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        }
      }
    ],
    "import/no-unresolved": "error",
    "import/no-cycle": "error",
    "import/no-self-import": "error",
    "import/no-duplicates": "error",
    "import/first": "error",
    "import/newline-after-import": "error",

    // Security rules
    "security/detect-object-injection": "warn",
    "security/detect-non-literal-regexp": "warn",
    "security/detect-unsafe-regex": "error",
    "security/detect-buffer-noassert": "error",
    "security/detect-child-process": "warn",
    "security/detect-disable-mustache-escape": "error",
    "security/detect-eval-with-expression": "error",
    "security/detect-new-buffer": "error",
    "security/detect-no-csrf-before-method-override": "error",
    "security/detect-possible-timing-attacks": "warn",
    "security/detect-pseudoRandomBytes": "error",

    // Node.js specific rules
    "node/no-deprecated-api": "error",
    "node/no-extraneous-import": "error",
    "node/no-extraneous-require": "error",
    "node/no-missing-import": "off", // TypeScript handles this
    "node/no-missing-require": "off", // TypeScript handles this
    "node/no-unpublished-import": "off",
    "node/no-unpublished-require": "off",
    "node/prefer-global/buffer": ["error", "always"],
    "node/prefer-global/console": ["error", "always"],
    "node/prefer-global/process": ["error", "always"],
    "node/prefer-global/url-search-params": ["error", "always"],
    "node/prefer-global/url": ["error", "always"],
    "node/prefer-promises/dns": "error",
    "node/prefer-promises/fs": "error",

    // General JavaScript rules
    "no-console": "warn",
    "no-debugger": "error",
    "no-alert": "error",
    "no-eval": "error",
    "no-implied-eval": "error",
    "no-new-func": "error",
    "no-script-url": "error",
    "no-return-await": "error",
    "prefer-const": "error",
    "prefer-arrow-callback": "error",
    "arrow-body-style": ["error", "as-needed"],
    "object-shorthand": "error",
    "prefer-template": "error",
    "template-curly-spacing": "error",
    "no-useless-concat": "error",
    "no-useless-template-literals": "error",
    "prefer-object-spread": "error",
    "prefer-destructuring": [
      "error",
      {
        "array": true,
        "object": true
      },
      {
        "enforceForRenamedProperties": false
      }
    ],

    // Code style rules
    "indent": "off", // Use TypeScript version
    "@typescript-eslint/indent": ["error", 2],
    "quotes": "off", // Use TypeScript version
    "@typescript-eslint/quotes": ["error", "single", { "avoidEscape": true }],
    "semi": "off", // Use TypeScript version
    "@typescript-eslint/semi": ["error", "always"],
    "comma-dangle": "off", // Use TypeScript version
    "@typescript-eslint/comma-dangle": ["error", "always-multiline"],
    "space-before-function-paren": "off", // Use TypeScript version
    "@typescript-eslint/space-before-function-paren": [
      "error",
      {
        "anonymous": "always",
        "named": "never",
        "asyncArrow": "always"
      }
    ],
    "brace-style": "off", // Use TypeScript version
    "@typescript-eslint/brace-style": ["error", "1tbs", { "allowSingleLine": true }],
    "keyword-spacing": "off", // Use TypeScript version
    "@typescript-eslint/keyword-spacing": "error",
    "space-infix-ops": "off", // Use TypeScript version
    "@typescript-eslint/space-infix-ops": "error",
    "comma-spacing": "off", // Use TypeScript version
    "@typescript-eslint/comma-spacing": "error",
    "object-curly-spacing": "off", // Use TypeScript version
    "@typescript-eslint/object-curly-spacing": ["error", "always"],
    "key-spacing": "error",
    "no-trailing-spaces": "error",
    "no-multiple-empty-lines": ["error", { "max": 2, "maxEOF": 1 }],
    "eol-last": ["error", "always"],
    "max-len": [
      "error",
      {
        "code": 100,
        "tabWidth": 2,
        "ignoreUrls": true,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true,
        "ignoreRegExpLiterals": true
      }
    ],

    // Error handling
    "no-throw-literal": "off", // Use TypeScript version
    "@typescript-eslint/no-throw-literal": "error",
    "@typescript-eslint/prefer-promise-reject-errors": "error",

    // Best practices
    "no-var": "error",
    "prefer-rest-params": "error",
    "prefer-spread": "error",
    "no-useless-call": "error",
    "no-useless-return": "error",
    "no-unneeded-ternary": "error",
    "yoda": "error",
    "eqeqeq": ["error", "always"],
    "curly": ["error", "all"],
    "dot-notation": "error",
    "no-else-return": "error",
    "no-empty-function": "off", // Use TypeScript version
    "@typescript-eslint/no-empty-function": "error",
    "no-lonely-if": "error",
    "no-nested-ternary": "error",
    "no-duplicate-imports": "off", // Use import/no-duplicates instead
    "sort-imports": "off", // Use import/order instead

    // Complexity
    "complexity": ["warn", 15],
    "max-depth": ["warn", 4],
    "max-nested-callbacks": ["warn", 3],
    "max-params": ["warn", 5],
    "max-statements": ["warn", 20]
  },
  "settings": {
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "project": "./tsconfig.json"
      },
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    }
  },
  "overrides": [
    {
      "files": ["*.js"],
      "rules": {
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/explicit-function-return-type": "off"
      }
    },
    {
      "files": ["tests/**/*", "**/*.test.ts", "**/*.spec.ts"],
      "env": {
        "jest": true
      },
      "rules": {
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "max-len": "off",
        "max-nested-callbacks": "off"
      }
    },
    {
      "files": ["netlify/functions/**/*"],
      "rules": {
        "node/no-unpublished-import": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-member-access": "off"
      }
    },
    {
      "files": ["sql/**/*"],
      "rules": {
        "@typescript-eslint/no-unused-vars": "off",
        "max-len": "off"
      }
    }
  ],
  "ignorePatterns": [
    "node_modules/",
    "dist/",
    "build/",
    "coverage/",
    "*.js.map",
    "*.d.ts"
  ]
}