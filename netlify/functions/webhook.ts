// Production Telegram Bot Webhook Handler
import { Handler, HandlerEvent, HandlerContext } from '@netlify/functions';
import { Bot, webhookCallback, InputFile } from 'grammy';

// Environment variables
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!;
const CLAUDE_API_KEY = process.env.CLAUDE_API_KEY!;
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY!;

// Create bot instance
const bot = new Bot(BOT_TOKEN);

// Helper function to generate image with Imagen
async function generateImageWithImagen(prompt: string) {
  try {
    console.log(`üé® Generating image with Imagen for: "${prompt}"`);
    
    const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/imagen-4.0-generate-001:predict', {
      method: 'POST',
      headers: {
        'x-goog-api-key': GOOGLE_API_KEY,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        instances: [{ prompt }],
        parameters: {
          sampleCount: 1,
          sampleImageSize: '1K',
          aspectRatio: '1:1'
        }
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Imagen API error: ${response.status} ${response.statusText} - ${errorText}`);
    }
    
    const data = await response.json();
    console.log('üé® Image generation successful!');
    
    if ((data as any).predictions && (data as any).predictions.length > 0) {
      const prediction = (data as any).predictions[0];
      if (prediction.bytesBase64Encoded) {
        return {
          imageData: prediction.bytesBase64Encoded,
          mimeType: prediction.mimeType || 'image/png'
        };
      }
    }
    
    throw new Error('No image data in response');
  } catch (error) {
    console.error('Imagen API error:', error);
    throw error;
  }
}

// Helper function for Claude API
async function callClaudeAPI(message: string) {
  try {
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': CLAUDE_API_KEY,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 100,
        messages: [{
          role: 'user',
          content: message
        }]
      })
    });
    
    const data = await response.json();
    
    if (response.ok) {
      return (data as any).content[0]?.text || 'ÏùëÎãµÏù¥ ÏóÜÏäµÎãàÎã§.';
    } else {
      throw new Error((data as any).error?.message || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò');
    }
  } catch (error) {
    console.error('Claude API Error:', error);
    throw error;
  }
}

// Bot commands
bot.command('start', async (ctx) => {
  console.log('üì® Start command received');
  await ctx.reply(`üé® ÌîÑÎ°úÎçïÏÖò AI Î¥áÏûÖÎãàÎã§! ü§ñ

üåü 24/7 ÏûëÎèôÌïòÎäî Ïã§Ï†ú ÏÑúÎπÑÏä§:
‚Ä¢ /start - Î¥á ÏãúÏûëÌïòÍ∏∞
‚Ä¢ /test - Ïó∞Í≤∞ ÌÖåÏä§Ìä∏  
‚Ä¢ /summary - Claude AI ÌÖåÏä§Ìä∏
‚Ä¢ /image [ÏÑ§Î™Ö] - üé® Ïã§Ï†ú Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±

‚ú® Netlify FunctionsÎ°ú ÏÑúÎ≤ÑÎ¶¨Ïä§ Ïö¥ÏòÅ
üöÄ Webhook Î∞©ÏãùÏúºÎ°ú Ïã§ÏãúÍ∞Ñ Ï≤òÎ¶¨
üí∞ Google Imagen 4.0 + Claude 3.5 Sonnet

ÏòàÏãú: /image Í∑ÄÏó¨Ïö¥ Ïö∞Ï£º Í≥†ÏñëÏù¥`);
});

bot.command('test', async (ctx) => {
  console.log('üß™ Test command received');
  await ctx.reply(`üß™ ÌîÑÎ°úÎçïÏÖò ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ!

üåê Î∞∞Ìè¨ ÌôòÍ≤Ω:
‚Ä¢ ÌîåÎû´Ìèº: ‚úÖ Netlify Functions
‚Ä¢ ÌÜµÏã† Î∞©Ïãù: ‚úÖ Webhook (Ïã§ÏãúÍ∞Ñ)
‚Ä¢ Claude API: ‚úÖ ${CLAUDE_API_KEY ? 'Ïó∞Í≤∞Îê®' : '‚ùå ÎØ∏Ïó∞Í≤∞'}
‚Ä¢ Google Imagen: ‚úÖ ${GOOGLE_API_KEY ? 'Ïó∞Í≤∞Îê®' : '‚ùå ÎØ∏Ïó∞Í≤∞'}

‚è∞ ÏÑúÎ≤Ñ ÏãúÍ∞Ñ: ${new Date().toISOString()}
üåç Ìï≠ÏÉÅ Ïò®ÎùºÏù∏ ÏÉÅÌÉúÎ°ú Ïö¥ÏòÅÎê©ÎãàÎã§!`);
});

bot.command('summary', async (ctx) => {
  console.log('üìù Summary command received');
  
  try {
    const message = await callClaudeAPI('ÏïàÎÖïÌïòÏÑ∏Ïöî! ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÏóêÏÑú ÌÖåÏä§Ìä∏ÏûÖÎãàÎã§. ÌïúÍµ≠Ïñ¥Î°ú ÏßßÍ≤å Ïù∏ÏÇ¨Ìï¥Ï£ºÏÑ∏Ïöî.');
    await ctx.reply(`üéâ Claude API ÌîÑÎ°úÎçïÏÖò ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ!

ClaudeÏùò ÏùëÎãµ:
${message}

‚úÖ ÏÑúÎ≤ÑÎ¶¨Ïä§ ÌôòÍ≤ΩÏóêÏÑú AI Ïó∞Îèô ÏôÑÎ£å!`);
  } catch (error) {
    await ctx.reply(`‚ùå Claude API Ïò§Î•ò: ${(error as Error).message}`);
  }
});

bot.command('image', async (ctx) => {
  const prompt = ctx.message?.text?.replace('/image', '').trim() || '';
  
  if (!prompt) {
    await ctx.reply(`üé® ÌîÑÎ°úÎçïÏÖò Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± ÏÇ¨Ïö©Î≤ï:

/image [ÏÉÅÏÑ∏Ìïú ÏÑ§Î™Ö]

üåü ÏÑúÎ≤ÑÎ¶¨Ïä§ ÌôòÍ≤ΩÏóêÏÑú Í≥†ÌíàÏßà Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±:
‚Ä¢ Google Imagen 4.0 ÏÇ¨Ïö©
‚Ä¢ 1024x1024 Ìï¥ÏÉÅÎèÑ
‚Ä¢ Ïã§ÏãúÍ∞Ñ Ï≤òÎ¶¨

ÏòàÏãú:
‚Ä¢ /image ÎØ∏ÎûòÏ†ÅÏù∏ Î°úÎ¥á Í∞úÎ∞úÏûê
‚Ä¢ /image ÏïÑÎ¶ÑÎã§Ïö¥ Ïö∞Ï£º ÌíçÍ≤Ω
‚Ä¢ /image Í∑ÄÏó¨Ïö¥ Ìé≠Í∑ÑÏù¥ ÏΩîÎî©ÌïòÎäî Î™®Ïäµ`);
    return;
  }
  
  console.log(`üé® Production image generation requested: "${prompt}"`);
  
  const generatingMessage = await ctx.reply(`üé® ÌîÑÎ°úÎçïÏÖò Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ï§ë...

ÌîÑÎ°¨ÌîÑÌä∏: "${prompt}"

‚ö° Netlify Functions + Google Imagen 4.0
üåç ÏÑúÎ≤ÑÎ¶¨Ïä§ ÌôòÍ≤ΩÏóêÏÑú Ï≤òÎ¶¨ Ï§ë...`);
  
  try {
    const imageResult = await generateImageWithImagen(prompt);
    
    // Create buffer from base64
    const imageBuffer = Buffer.from(imageResult.imageData.replace(/^data:image\/[a-z]+;base64,/, ''), 'base64');
    
    // Send image directly from buffer
    await ctx.replyWithPhoto(new InputFile(imageBuffer, `generated_${Date.now()}.png`), {
      caption: `üé® ÌîÑÎ°úÎçïÏÖò Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± ÏôÑÎ£å!

ÌîÑÎ°¨ÌîÑÌä∏: "${prompt}"

‚ú® Google Imagen 4.0
üåê Netlify Functions
üéØ Ìï¥ÏÉÅÎèÑ: 1024x1024
‚è±Ô∏è ${new Date().toLocaleString('ko-KR')}`
    });
    
    // Delete generating message
    await ctx.api.deleteMessage(ctx.chat.id, generatingMessage.message_id);
    
    console.log('‚úÖ Production image sent successfully!');
    
  } catch (error) {
    console.error('Production image generation error:', error);
    
    await ctx.api.editMessageText(
      ctx.chat.id,
      generatingMessage.message_id,
      `‚ùå ÌîÑÎ°úÎçïÏÖò Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ïò§Î•ò:

${(error as Error).message}

üîß ÏÑúÎ≤ÑÎ¶¨Ïä§ ÌôòÍ≤ΩÏóêÏÑúÏùò ÏùºÏãúÏ†Å Ïò§Î•òÏùº Ïàò ÏûàÏäµÎãàÎã§.
üí° Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.`
    );
  }
});

// Handle text messages
bot.on('message:text', async (ctx) => {
  const text = ctx.message.text;
  console.log(`üí¨ Production message received: ${text}`);
  
  if (!text.startsWith('/')) {
    await ctx.reply(`üì® Î©îÏãúÏßÄ ÏàòÏã†: "${text}"

üé® Ïù¥ÎØ∏ÏßÄÎ°ú ÎßåÎì§Ïñ¥Î≥ºÍπåÏöî?
/image ${text}

ü§ñ ÎòêÎäî Îã§Î•∏ Í∏∞Îä•:
‚Ä¢ /test - ÌîÑÎ°úÎçïÏÖò ÏÉÅÌÉú ÌôïÏù∏
‚Ä¢ /summary - Claude AI ÌÖåÏä§Ìä∏`);
  }
});

// Error handling
bot.catch((err) => {
  console.error('Production bot error:', err);
});

// Create webhook callback
const webhookHandler = webhookCallback(bot, 'std/http');

// Netlify Functions handler
export const handler: Handler = async (event: HandlerEvent, context: HandlerContext) => {
  console.log('üåê Webhook received in production environment');
  
  try {
    // Verify it's a POST request
    if (event.httpMethod !== 'POST') {
      return {
        statusCode: 405,
        body: JSON.stringify({ error: 'Method not allowed' })
      };
    }
    
    // Create request object for webhook handler
    const request = new Request('https://example.com/webhook', {
      method: 'POST',
      headers: {
        'content-type': 'application/json',
        ...event.headers
      },
      body: event.body
    });
    
    // Process webhook
    const response = await webhookHandler(request);
    
    console.log('‚úÖ Webhook processed successfully');
    
    return {
      statusCode: response.status,
      headers: {
        'Content-Type': 'application/json'
      },
      body: await response.text()
    };
    
  } catch (error) {
    console.error('‚ùå Webhook processing error:', error);
    
    return {
      statusCode: 500,
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ 
        error: 'Internal server error',
        message: (error as Error).message
      })
    };
  }
};