// Production Telegram Bot Webhook Handler
import { Handler, HandlerContext, HandlerEvent } from '@netlify/functions';
import { Bot, InputFile, webhookCallback } from 'grammy';

// Constants
const CLAUDE_MODEL = 'claude-3-5-sonnet-20241022';
const IMAGEN_MODEL = 'imagen-4.0-generate-001';
const ANTHROPIC_VERSION = '2023-06-01';

// Import prompt management utilities
import { getImagePrompt, getDobbyImagePrompt, getQAPrompt, getSystemMessage } from '../../src/utils/prompt-manager';

// Import tracking system
import { parseTrackingCommand, handleTrackingCommand, trackMessageMiddleware } from '../../src/utils/tracking-commands';

// Import error handling
import { ensureChatGroupExists, getUserFriendlyErrorMessage, logErrorWithContext } from '../../src/utils/error-handler';
import { TrackingError } from '../../src/types/tracking.types';

// Import version management
import { getVersionInfoForHelp, getFormattedVersionHistory } from '../../src/utils/version-manager';

// Environment variables
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!;
const CLAUDE_API_KEY = process.env.CLAUDE_API_KEY!;
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY!;

// =============================================================================
// COST CALCULATION FUNCTIONS
// =============================================================================

/**
 * Calculate cost for Claude API usage
 * Pricing: ~$3 per million input tokens, ~$15 per million output tokens
 */
function calculateClaudeCost(inputTokens: number, outputTokens: number): number {
  const INPUT_COST_PER_MILLION = 3.0;
  const OUTPUT_COST_PER_MILLION = 15.0;

  const inputCost = (inputTokens / 1000000) * INPUT_COST_PER_MILLION;
  const outputCost = (outputTokens / 1000000) * OUTPUT_COST_PER_MILLION;

  return inputCost + outputCost;
}

/**
 * Calculate cost for Google Imagen API usage
 * Pricing: ~$0.020 per image
 */
function calculateImagenCost(): number {
  return 0.020;
}

/**
 * Calculate cost for Gemini Vision API usage
 * Pricing: ~$0.00025 per image analysis
 */
function calculateGeminiVisionCost(): number {
  return 0.00025;
}

/**
 * Format cost display for users
 */
function formatCost(cost: number): string {
  if (cost < 0.001) {
    return '< $0.001';
  }
  return `$${cost.toFixed(3)}`;
}

// =============================================================================
// ENHANCED FETCH WITH TIMEOUT
// =============================================================================

/**
 * Enhanced fetch with timeout support
 */
async function fetchWithTimeout(
  url: string,
  options: RequestInit,
  timeoutMs: number = 30000
): Promise<Response> {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), timeoutMs);

  try {
    const response = await fetch(url, {
      ...options,
      signal: controller.signal
    });
    clearTimeout(timeoutId);
    return response;
  } catch (error) {
    clearTimeout(timeoutId);
    if (error instanceof Error && error.name === 'AbortError') {
      throw new Error(`Request timed out after ${timeoutMs}ms`);
    }
    throw error;
  }
}

// Create bot instance
const bot = new Bot(BOT_TOKEN);

// =============================================================================
// DUPLICATE MESSAGE PREVENTION
// =============================================================================

// In-memory cache to prevent duplicate message processing
const processedMessages = new Set<string>();
const CACHE_CLEANUP_INTERVAL = 5 * 60 * 1000; // 5 minutes
const MESSAGE_CACHE_TTL = 10 * 60 * 1000; // 10 minutes

// Cleanup old message IDs periodically
setInterval(() => {
  const now = Date.now();
  processedMessages.forEach((messageKey) => {
    const [timestamp] = messageKey.split(':');
    if (now - parseInt(timestamp) > MESSAGE_CACHE_TTL) {
      processedMessages.delete(messageKey);
    }
  });
}, CACHE_CLEANUP_INTERVAL);

// Middleware to prevent duplicate processing
bot.use(async (ctx, next) => {
  const message = ctx.message;
  if (!message) return next();
  
  // Create unique message key: timestamp:chat_id:message_id:user_id
  const messageKey = `${Date.now()}:${ctx.chat.id}:${message.message_id}:${ctx.from?.id}`;
  const checkKey = `${ctx.chat.id}:${message.message_id}:${ctx.from?.id}`;
  
  // Check if we've already processed this message
  const alreadyProcessed = Array.from(processedMessages).some(key => key.includes(checkKey));
  
  if (alreadyProcessed) {
    console.log(`üîÑ Duplicate message detected, skipping: ${checkKey}`);
    return; // Skip duplicate processing
  }
  
  // Mark message as being processed
  processedMessages.add(messageKey);
  console.log(`‚úÖ Processing new message: ${checkKey}`);
  
  return next();
});

// Add tracking middleware to track messages when tracking is active
bot.use(trackMessageMiddleware);

// Error handling middleware
bot.use(async (ctx, next) => {
  try {
    // Ensure chat group exists in database
    await ensureChatGroupExists(ctx);
    await next();
  } catch (error) {
    console.error('Bot middleware error:', error);
    logErrorWithContext(error as Error, {
      chat_id: ctx.chat?.id,
      user_id: ctx.from?.id,
      message_text: ctx.message && 'text' in ctx.message ? ctx.message.text : null

    });
    
    if (error instanceof TrackingError) {
      await ctx.reply(getUserFriendlyErrorMessage(error));
    } else {
      await ctx.reply(`üßô‚Äç‚ôÄÔ∏è **ÎèÑÎπÑÍ∞Ä ÏòàÏÉÅÏπò Î™ªÌïú Î¨∏Ï†úÎ•º ÎßåÎÇ¨ÏäµÎãàÎã§...**

‚ùå ÏùºÏãúÏ†ÅÏù∏ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.

üí° Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî. Î¨∏Ï†úÍ∞Ä ÏßÄÏÜçÎêòÎ©¥ Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî.`);
    }
  }
});

// Helper function to generate image with Imagen
async function generateImageWithImagen(userInput: string, isDobby: boolean = false, userId?: string, chatId?: string) {
  const startTime = Date.now();

  try {
    console.log(`üé® Generating image with Imagen for: "${userInput}"`);

    // Get dynamic prompt from database
    const enhancedPrompt = isDobby
      ? await getDobbyImagePrompt(userInput)
      : await getImagePrompt(userInput);

    console.log(`üìù Using enhanced prompt: "${enhancedPrompt}"`);

    // Use enhanced fetch with 30-second timeout for image generation
    const response = await fetchWithTimeout(
      'https://generativelanguage.googleapis.com/v1beta/models/imagen-4.0-generate-001:predict',
      {
        method: 'POST',
        headers: {
          'x-goog-api-key': GOOGLE_API_KEY,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          instances: [{ prompt: enhancedPrompt }],
          parameters: {
            sampleCount: 1,
            sampleImageSize: '1K',
            aspectRatio: '1:1'
          }
        })
      },
      30000 // 30-second timeout for image generation
    );

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Imagen API error: ${response.status} ${response.statusText} - ${errorText}`);
    }

    const data = await response.json();
    const processingTime = Date.now() - startTime;

    console.log(`üé® Image generation successful in ${processingTime}ms!`);

    // Calculate cost
    const imageCost = calculateImagenCost();

    if ((data as any).predictions && (data as any).predictions.length > 0) {
      const prediction = (data as any).predictions[0];
      if (prediction.bytesBase64Encoded) {
        return {
          imageData: prediction.bytesBase64Encoded,
          mimeType: prediction.mimeType || 'image/png',
          cost: imageCost,
          processingTime
        };
      }
    }

    throw new Error('No image data in response');
  } catch (error) {
    console.error('Imagen API error:', error);
    throw error;
  }
}

// Helper function for Claude API with dynamic prompts
async function callClaudeAPI(message: string, maxTokens: number = 2000, temperature: number = 0.7) {
  const startTime = Date.now();

  try {
    // Use enhanced fetch with timeout
    const response = await fetchWithTimeout(
      'https://api.anthropic.com/v1/messages',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': CLAUDE_API_KEY,
          'anthropic-version': '2023-06-01'
        },
        body: JSON.stringify({
          model: 'claude-3-5-sonnet-20241022',
          max_tokens: maxTokens,
          temperature: temperature,
          messages: [{
            role: 'user',
            content: message
          }]
        })
      },
      45000 // 45-second timeout for Claude API (increased from 20s due to timeouts)
    );


    const data = await response.json();
    const processingTime = Date.now() - startTime;

    if (response.ok) {
      const responseText = (data as any).content[0]?.text || 'ÏùëÎãµÏù¥ ÏóÜÏäµÎãàÎã§.';

      // Calculate cost based on token usage
      const usage = (data as any).usage;
      const inputTokens = usage?.input_tokens || 0;
      const outputTokens = usage?.output_tokens || 0;
      const cost = calculateClaudeCost(inputTokens, outputTokens);

      return {
        text: responseText,
        cost,
        processingTime,
        inputTokens,
        outputTokens
      };
    } else {
      const errorText = await response.text();
      console.error('Claude API Error Response:', errorText);
      throw new Error((data as any).error?.message || `Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò: ${response.status} ${response.statusText}`);
    }
  } catch (error) {
    console.error('Claude API Error:', error);
    throw error;
  }
}

// Helper function for Claude API (Vision)
async function callClaudeVisionAPI(prompt: string, imageData: string, mediaType: string) {
  try {
    console.log(`üñºÔ∏è Calling Claude Vision API for prompt: "${prompt}"`);
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': CLAUDE_API_KEY,
        'anthropic-version': ANTHROPIC_VERSION
      },
      body: JSON.stringify({
        model: CLAUDE_MODEL,
        max_tokens: 2000,
        messages: [{
          role: 'user',
          content: [
            {
              type: 'image',
              source: {
                type: 'base64',
                media_type: mediaType,
                data: imageData,
              },
            },
            {
              type: 'text',
              text: prompt
            }
          ]
        }]
      })
    });

    const data = await response.json();

    if (response.ok) {
      console.log('üñºÔ∏è Claude Vision API call successful!');
      return (data as any).content[0]?.text || 'Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.';
    } else {
      const errorText = await response.text();
      console.error('Claude Vision API Error Response:', errorText);
      throw new Error((data as any).error?.message || `Vision API Ïò§Î•ò: ${response.status} ${response.statusText}`);
    }
  } catch (error) {
    console.error('Claude Vision API Error:', error);
    throw error;
  }
}

// Centralized error handler
async function handleError(ctx: any, error: Error, command: string, thinkingMessage: any = null) {
  console.error(`Error in ${command}:`, error);

  const errorMessage = `‚ùå **'${command}' ÏûëÏóÖ Ï§ë Ïò§Î•ò Î∞úÏÉù**

**Ïò§Î•ò ÎÇ¥Ïö©:**
${error.message}

üí° Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥ Î≥¥ÏãúÍ±∞ÎÇò, Î¨∏Ï†úÍ∞Ä Í≥ÑÏÜçÎêòÎ©¥ Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî.`;

  try {
    if (thinkingMessage?.message_id) {
      await ctx.api.editMessageText(
        ctx.chat.id,
        thinkingMessage.message_id,
        errorMessage
      );
    } else {
      await ctx.reply(errorMessage);
    }
  } catch (replyError) {
    console.error('Failed to send error message to user:', replyError);
  }
}

// Helper function to detect questions
function isQuestion(text: string): boolean {
  const questionPatterns = [
    /\?$/,                    // ends with ?
    /^(Î≠ê|Î¨¥Ïóá|Ïñ¥Îñª|Ïñ¥Îîî|Ïñ∏Ï†ú|Ïôú|ÎàÑÍµ¨|Ïñ¥Îäê)/,  // Korean question words
    /^(what|how|where|when|why|who|which)/i,  // English question words
    /(Î∞©Î≤ï|Ïñ¥ÎñªÍ≤å|ÏïåÎ†§Ï§ò|Í∂ÅÍ∏à)/,    // asking for help/info
    /(Ï∂îÏ≤ú|Ï†úÏïà|ÏùòÍ≤¨)/,           // asking for recommendations
  ];

  return questionPatterns.some(pattern => pattern.test(text.trim()));
}

// Helper function to detect Dobby activation
function isDobbyActivated(text: string): { activated: boolean; command: string | null; content: string } {
  const dobbyPattern = /ÎèÑÎπÑÏïº[,\s]*(.*)/i;
  const match = text.match(dobbyPattern);

  if (!match) {
    return { activated: false, command: null, content: '' };
  }

  const content = match[1].trim();

  // Check for help commands
  if (/(ÏÇ¨Ïö©Î≤ï|ÎèÑÏõÄÎßê|ÏÇ¨Ïö©Î∞©Î≤ï|Ïñ¥ÎñªÍ≤å|Î©îÎâ¥Ïñº|Í∞ÄÏù¥Îìú|Î™ÖÎ†πÏñ¥)/i.test(content)) {
    return { activated: true, command: 'help', content: content };
  }

  // Check for image generation commands
  if (/(Í∑∏Î†§Ï§ò|Í∑∏Î†§|Í∑∏Î¶º|Ïù¥ÎØ∏ÏßÄ|ÏÉùÏÑ±)/i.test(content)) {
    const imagePrompt = content.replace(/(Í∑∏Î†§Ï§ò|Í∑∏Î†§|Í∑∏Î¶º|Ïù¥ÎØ∏ÏßÄ|ÏÉùÏÑ±Ìï¥?)/gi, '').trim();
    return { activated: true, command: 'image', content: imagePrompt };
  }

  // Check for Q&A commands
  if (/(ÏïåÎ†§Ï§ò|Î≠êÏïº|ÏÑ§Î™ÖÌï¥|Í∞ÄÎ•¥Ï≥ê|Í∂ÅÍ∏à)/i.test(content)) {
    return { activated: true, command: 'ask', content: content };
  }

  // Default to Q&A if no specific command detected
  return { activated: true, command: 'ask', content: content };
}

// Enhanced Q&A function with dynamic prompts
async function answerQuestion(question: string, isDobby: boolean = false, userId?: string, chatId?: string) {
  try {
    console.log(`ü§î Processing question: "${question}"`);

    // Get dynamic prompt from database
    const { prompt, maxTokens, temperature } = await getQAPrompt(question, isDobby);

    console.log(`üìù Using ${isDobby ? 'Dobby' : 'standard'} prompt template`);

    const claudeResponse = await callClaudeAPI(prompt, maxTokens, temperature);

    return {
      text: claudeResponse.text,
      cost: claudeResponse.cost,
      processingTime: claudeResponse.processingTime,
      tokenUsage: {
        input: claudeResponse.inputTokens,
        output: claudeResponse.outputTokens
      }
    };
  } catch (error) {
    console.error('Q&A Error:', error);
    throw error;
  }
}

// Helper function to get help message content
async function getHelpMessage(): Promise<string> {
  try {
    const versionInfo = await getVersionInfoForHelp();

    return `üßô‚Äç‚ôÄÔ∏è **ÎèÑÎπÑ AI Î¥áÏûÖÎãàÎã§!** üè†

${versionInfo}

üåü **ÎèÑÎπÑ Í∞úÏù∏ÎπÑÏÑú Î™®Îìú:**
‚Ä¢ üé® **"ÎèÑÎπÑÏïº, ~~~ Í∑∏Î†§Ï§ò"** - ÎßàÎ≤ïÍ∞ôÏùÄ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±
‚Ä¢ üí¨ **"ÎèÑÎπÑÏïº, ~~~ ÏïåÎ†§Ï§ò/Î≠êÏïº?"** - Ï∂©Ïã§Ìïú ÏßàÎ¨∏ ÎãµÎ≥Ä
‚Ä¢ üñºÔ∏è **ÏÇ¨ÏßÑÏóê ÎãµÏû•** - Ïù¥ÎØ∏ÏßÄ Ìé∏Ïßë Î∞è ÏàòÏ†ï

üìù **NEW! ÎåÄÌôî Ï∂îÏ†Å Î∞è ÏöîÏïΩ Í∏∞Îä•:**
‚Ä¢ **"ÎèÑÎπÑÏïº, ÎåÄÌôî Ï∂îÏ†Å ÏãúÏûëÌï¥Ï§ò"** - Ï§ëÏöîÌïú ÎåÄÌôî Í∏∞Î°ù ÏãúÏûë
‚Ä¢ **"ÎèÑÎπÑÏïº, ÎåÄÌôî Ï∂îÏ†Å Í∑∏ÎßåÌï¥Ï§ò"** - Ï∂îÏ†Å Ï§ëÎã®
‚Ä¢ **"ÎèÑÎπÑÏïº, ÏöîÏïΩÌï¥Ï§ò"** - Ï∂îÏ†ÅÎêú ÎåÄÌôîÎ•º ÎòëÎòëÌïòÍ≤å ÏöîÏïΩ
‚Ä¢ üìä Í∞úÏù∏Î≥Ñ Ï∂îÏ†Å - Í∞ÅÏûê ÏõêÌïòÎäî ÎåÄÎ°ú Ï∂îÏ†Å Í∞ÄÎä•

ü§ñ **ÏùºÎ∞ò AI Í∏∞Îä•:**
‚Ä¢ /ask [ÏßàÎ¨∏] - Î™ÖÏãúÏ†Å ÏßàÎ¨∏ÌïòÍ∏∞
‚Ä¢ /image [ÏÑ§Î™Ö] - Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±
‚Ä¢ /help - ÏÇ¨Ïö©Î≤ï Î≥¥Í∏∞
‚Ä¢ /version - Î≤ÑÏ†Ñ Í∏∞Î°ù ÌôïÏù∏
‚Ä¢ ÏûêÎèô ÏßàÎ¨∏ Í∞êÏßÄ - ÏßàÎ¨∏ÌïòÎ©¥ Î∞îÎ°ú ÎãµÎ≥Ä

üéØ **Ï∂îÏ†Å ÏãúÏä§ÌÖú Î™ÖÎ†πÏñ¥:**
‚Ä¢ /track_start - ÎåÄÌôî Ï∂îÏ†Å ÏãúÏûë
‚Ä¢ /track_stop - ÎåÄÌôî Ï∂îÏ†Å Ï§ëÎã®
‚Ä¢ /summarize - ÎåÄÌôî ÏöîÏïΩ ÏÉùÏÑ±
‚Ä¢ /track_status - ÌòÑÏû¨ Ï∂îÏ†Å ÏÉÅÌÉú ÌôïÏù∏

üßô‚Äç‚ôÄÔ∏è **ÎèÑÎπÑ ÏÇ¨Ïö© ÏòàÏãú:**
‚Ä¢ "ÎèÑÎπÑÏïº, Í∑ÄÏó¨Ïö¥ Í∞ïÏïÑÏßÄ Í∑∏Î†§Ï§ò"
‚Ä¢ "ÎèÑÎπÑÏïº, ÌååÏù¥Ïç¨ Í≥µÎ∂ÄÎ≤ï ÏïåÎ†§Ï§ò"
‚Ä¢ "ÎèÑÎπÑÏïº, ÎåÄÌôî Ï∂îÏ†Å ÏãúÏûëÌï¥Ï§ò"
‚Ä¢ "ÎèÑÎπÑÏïº, ÏöîÏïΩÌï¥Ï§ò"
‚Ä¢ "ÎèÑÎπÑÏïº, ÏÇ¨Ïö©Î≤ï ÏïåÎ†§Ï§ò"

‚ú® **ÎèÑÎπÑÏùò ÌäπÎ≥ÑÌï®:**
‚Ä¢ üé≠ Ìï¥Î¶¨Ìè¨ÌÑ∞ ÎèÑÎπÑ Ï∫êÎ¶≠ÌÑ∞ Ïä§ÌÉÄÏùº
‚Ä¢ üè† "Ï£ºÏù∏Îãò"ÏùÑ ÏúÑÌïú Ï∂©Ïã§Ìïú ÏÑúÎπÑÏä§
‚Ä¢ üîÆ ÎßàÎ≤ïÍ∞ôÏùÄ AI Îä•Î†• (Google Imagen 4.0 + Claude 3.5)
‚Ä¢ üìö ÎòëÎòëÌïú ÎåÄÌôî ÏöîÏïΩ (Í∞úÏù∏Î≥Ñ ÎßûÏ∂§)

üéØ **ÎèÑÎπÑÎäî Ïñ∏Ï†úÎÇò Ï§ÄÎπÑÎêòÏñ¥ ÏûàÏäµÎãàÎã§!**
"ÎèÑÎπÑÏïº"ÎùºÍ≥† Î∂àÎü¨Ï£ºÏãúÎ©¥ Ï¶âÏãú Îã¨Î†§Í∞ëÎãàÎã§! üèÉ‚Äç‚ôÇÔ∏è‚ú®`;
  } catch (error) {
    console.error('Error getting help message:', error);
    // Fallback to basic message
    return `üßô‚Äç‚ôÄÔ∏è **ÎèÑÎπÑ AI Î¥áÏûÖÎãàÎã§!** üè†

ü§ñ **ÎèÑÎπÑ Î¥á v1.0.0** (Í∞úÎ∞ú Ï§ë)

üåü **ÎèÑÎπÑ Í∞úÏù∏ÎπÑÏÑú Î™®Îìú:**
‚Ä¢ üé® **"ÎèÑÎπÑÏïº, ~~~ Í∑∏Î†§Ï§ò"** - ÎßàÎ≤ïÍ∞ôÏùÄ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±
‚Ä¢ üí¨ **"ÎèÑÎπÑÏïº, ~~~ ÏïåÎ†§Ï§ò/Î≠êÏïº?"** - Ï∂©Ïã§Ìïú ÏßàÎ¨∏ ÎãµÎ≥Ä
‚Ä¢ üñºÔ∏è **ÏÇ¨ÏßÑÏóê ÎãµÏû•** - Ïù¥ÎØ∏ÏßÄ Ìé∏Ïßë Î∞è ÏàòÏ†ï

üìù **ÎåÄÌôî Ï∂îÏ†Å Î∞è ÏöîÏïΩ Í∏∞Îä•:**
‚Ä¢ **"ÎèÑÎπÑÏïº, ÎåÄÌôî Ï∂îÏ†Å ÏãúÏûëÌï¥Ï§ò"** - Ï§ëÏöîÌïú ÎåÄÌôî Í∏∞Î°ù ÏãúÏûë
‚Ä¢ **"ÎèÑÎπÑÏïº, ÎåÄÌôî Ï∂îÏ†Å Í∑∏ÎßåÌï¥Ï§ò"** - Ï∂îÏ†Å Ï§ëÎã®
‚Ä¢ **"ÎèÑÎπÑÏïº, ÏöîÏïΩÌï¥Ï§ò"** - Ï∂îÏ†ÅÎêú ÎåÄÌôîÎ•º ÎòëÎòëÌïòÍ≤å ÏöîÏïΩ

üéØ **ÎèÑÎπÑÎäî Ïñ∏Ï†úÎÇò Ï§ÄÎπÑÎêòÏñ¥ ÏûàÏäµÎãàÎã§!**
"ÎèÑÎπÑÏïº"ÎùºÍ≥† Î∂àÎü¨Ï£ºÏãúÎ©¥ Ï¶âÏãú Îã¨Î†§Í∞ëÎãàÎã§! üèÉ‚Äç‚ôÇÔ∏è‚ú®`;
  }
}

// Bot commands
bot.command('start', async (ctx) => {
  console.log('üì® Start command received');
  const helpMessage = await getHelpMessage();
  await ctx.reply(helpMessage);
});

// Help command - shows same content as start
bot.command('help', async (ctx) => {
  console.log('‚ùì Help command received');
  const helpMessage = await getHelpMessage();
  await ctx.reply(helpMessage);
});

// Version command - shows version history
bot.command('version', async (ctx) => {
  console.log('üìö Version command received');

  try {
    const versionHistory = await getFormattedVersionHistory(5);
    await ctx.reply(`${versionHistory}

üí° **Î™ÖÎ†πÏñ¥:**
‚Ä¢ /version - ÏµúÍ∑º 5Í∞ú Î≤ÑÏ†Ñ Î≥¥Í∏∞
‚Ä¢ /help - ÏÇ¨Ïö©Î≤ï Î≥¥Í∏∞

üè† ÎèÑÎπÑÍ∞Ä ÏßÄÏÜçÏ†ÅÏúºÎ°ú Î∞úÏ†ÑÌïòÍ≥† ÏûàÏäµÎãàÎã§!`);

  } catch (error) {
    console.error('Error fetching version history:', error);
    await ctx.reply(`‚ùå **Î≤ÑÏ†Ñ Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§**

${(error as Error).message}

üí° Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.`);
  }
});

bot.command('test', async (ctx) => {
  console.log('üß™ Test command received');
  await ctx.reply(`üß™ ÌîÑÎ°úÎçïÏÖò ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ!

üåê Î∞∞Ìè¨ ÌôòÍ≤Ω:
‚Ä¢ ÌîåÎû´Ìèº: ‚úÖ Netlify Functions
‚Ä¢ ÌÜµÏã† Î∞©Ïãù: ‚úÖ Webhook (Ïã§ÏãúÍ∞Ñ)
‚Ä¢ Claude API: ‚úÖ ${CLAUDE_API_KEY ? 'Ïó∞Í≤∞Îê®' : '‚ùå ÎØ∏Ïó∞Í≤∞'}
‚Ä¢ Google Imagen: ‚úÖ ${GOOGLE_API_KEY ? 'Ïó∞Í≤∞Îê®' : '‚ùå ÎØ∏Ïó∞Í≤∞'}

‚è∞ ÏÑúÎ≤Ñ ÏãúÍ∞Ñ: ${new Date().toISOString()}
üåç Ìï≠ÏÉÅ Ïò®ÎùºÏù∏ ÏÉÅÌÉúÎ°ú Ïö¥ÏòÅÎê©ÎãàÎã§!`);
});

bot.command('summary', async (ctx) => {
  console.log('üìù Summary command received');
  try {
    const claudeResponse = await callClaudeAPI('ÏïàÎÖïÌïòÏÑ∏Ïöî! ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÏóêÏÑú ÌÖåÏä§Ìä∏ÏûÖÎãàÎã§. ÌïúÍµ≠Ïñ¥Î°ú ÏßßÍ≤å Ïù∏ÏÇ¨Ìï¥Ï£ºÏÑ∏Ïöî.');
    await ctx.reply(`üéâ Claude API ÌîÑÎ°úÎçïÏÖò ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ!

ClaudeÏùò ÏùëÎãµ:
${claudeResponse.text}

üí∞ ÎπÑÏö©: ${formatCost(claudeResponse.cost)}
‚è±Ô∏è Ï≤òÎ¶¨ÏãúÍ∞Ñ: ${claudeResponse.processingTime}ms
üî§ ÌÜ†ÌÅ∞ ÏÇ¨Ïö©Îüâ: ${claudeResponse.inputTokens} ‚Üí ${claudeResponse.outputTokens}

‚úÖ ÏÑúÎ≤ÑÎ¶¨Ïä§ ÌôòÍ≤ΩÏóêÏÑú AI Ïó∞Îèô ÏôÑÎ£å!`);

  } catch (error) {
    await handleError(ctx, error as Error, 'Claude API ÌÖåÏä§Ìä∏');
  }
});

bot.command('image', async (ctx) => {
  const prompt = ctx.message?.text?.replace('/image', '').trim() || '';
  if (!prompt) {
    await ctx.reply(`üé® **Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± ÏÇ¨Ïö©Î≤ï:**\n\n/image [ÏÉÅÏÑ∏Ìïú ÏÑ§Î™Ö]\n\nÏòàÏãú:\n‚Ä¢ /image ÎØ∏ÎûòÏ†ÅÏù∏ Î°úÎ¥á Í∞úÎ∞úÏûê`);
    return;
  }

  console.log(`üé® Image generation requested: "${prompt}"`);
  const generatingMessage = await ctx.reply(`üé® Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ï§ë...\n\nÌîÑÎ°¨ÌîÑÌä∏: "${prompt}"`);

  try {
    const imageResult = await generateImageWithImagen(prompt, false, ctx.from?.id?.toString(), ctx.chat?.id?.toString());

    // Create buffer from base64

    const imageBuffer = Buffer.from(imageResult.imageData.replace(/^data:image\/[a-z]+;base64,/, ''), 'base64');

    await ctx.replyWithPhoto(new InputFile(imageBuffer, `generated_${Date.now()}.png`), {
      caption: `üé® ÌîÑÎ°úÎçïÏÖò Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± ÏôÑÎ£å!

ÌîÑÎ°¨ÌîÑÌä∏: "${prompt}"

‚ú® Google Imagen 4.0
üåê Netlify Functions
üéØ Ìï¥ÏÉÅÎèÑ: 1024x1024
üí∞ ÎπÑÏö©: ${formatCost(imageResult.cost)}
‚è±Ô∏è Ï≤òÎ¶¨ÏãúÍ∞Ñ: ${imageResult.processingTime}ms
üìÖ ${new Date().toLocaleString('ko-KR')}`

    });

    await ctx.api.deleteMessage(ctx.chat.id, generatingMessage.message_id);
    console.log('‚úÖ Image sent successfully!');
  } catch (error) {
    await handleError(ctx, error as Error, 'Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±', generatingMessage);
  }
});

bot.command('ask', async (ctx) => {
  const question = ctx.message?.text?.replace('/ask', '').trim() || '';
  if (!question) {
    await ctx.reply(`ü§î **AI ÏßàÎ¨∏ÎãµÎ≥Ä ÏÇ¨Ïö©Î≤ï:**\n\n/ask [ÏßàÎ¨∏ÎÇ¥Ïö©]\n\nÏòàÏãú:\n‚Ä¢ /ask ÌååÏù¥Ïç¨ Î¨∏Î≤ï Ïñ¥ÎñªÍ≤å Î∞∞Ïõå?`);
    return;
  }

  console.log(`üîç Explicit question asked: "${question}"`);
  const thinkingMessage = await ctx.reply(`ü§î ÏßàÎ¨∏ÏùÑ Î∂ÑÏÑùÌïòÍ≥† ÏûàÏäµÎãàÎã§...\n\nÏßàÎ¨∏: "${question}"`);

  try {
    const answerResult = await answerQuestion(question, false, ctx.from?.id?.toString(), ctx.chat?.id?.toString());

    // Delete thinking message and send answer
    await ctx.api.deleteMessage(ctx.chat.id, thinkingMessage.message_id);

    await ctx.reply(`ü§ñ **AI ÎãµÎ≥Ä** (/ask Î™ÖÎ†πÏñ¥)

‚ùì **ÏßàÎ¨∏:** ${question}

üí° **ÎãµÎ≥Ä:**
${answerResult.text}

üí∞ **ÎπÑÏö©:** ${formatCost(answerResult.cost)}
‚è±Ô∏è **Ï≤òÎ¶¨ÏãúÍ∞Ñ:** ${answerResult.processingTime}ms
üî§ **ÌÜ†ÌÅ∞:** ${answerResult.tokenUsage.input} ‚Üí ${answerResult.tokenUsage.output}

---
‚ú® Ï∂îÍ∞Ä ÏßàÎ¨∏Ïù¥ ÏûàÏúºÎ©¥ Ïñ∏Ï†úÎì† /ask [ÏßàÎ¨∏] ÌïòÏÑ∏Ïöî!
‚è∞ ${new Date().toLocaleString('ko-KR')}`);


    console.log('‚úÖ Explicit question answered successfully!');
  } catch (error) {
    await handleError(ctx, error as Error, 'ÏßàÎ¨∏ ÎãµÎ≥Ä', thinkingMessage);
  }
});

// Tracking Commands
bot.command('track_start', async (ctx) => {
  console.log('üü¢ /track_start command received');
  const command = parseTrackingCommand('/track_start', ctx);
  if (command) {
    await handleTrackingCommand(command, ctx);
  }
});

bot.command('track_stop', async (ctx) => {
  console.log('üî¥ /track_stop command received');
  const command = parseTrackingCommand('/track_stop', ctx);
  if (command) {
    await handleTrackingCommand(command, ctx);
  }
});

bot.command('summarize', async (ctx) => {
  console.log('üìù /summarize command received');
  const command = parseTrackingCommand('/summarize', ctx);
  if (command) {
    await handleTrackingCommand(command, ctx);
  }
});

bot.command('track_status', async (ctx) => {
  console.log('üìä /track_status command received');
  const command = parseTrackingCommand('/track_status', ctx);
  if (command) {
    await handleTrackingCommand(command, ctx);
  }
});

// Health check and maintenance commands (admin only)
bot.command('health', async (ctx) => {
  console.log('üè• /health command received');
  
  try {
    const { performHealthCheck } = await import('../../src/utils/error-handler');
    const health = await performHealthCheck();
    
    const statusEmoji = {
      database: health.database ? '‚úÖ' : '‚ùå',
      claude_api: health.claude_api ? '‚úÖ' : '‚ùå',
      tracking_system: health.tracking_system ? '‚úÖ' : '‚ùå'
    };
    
    await ctx.reply(`üè• **ÏãúÏä§ÌÖú ÏÉÅÌÉú Ï†êÍ≤Ä Í≤∞Í≥º**

üìä **ÏÑúÎπÑÏä§ ÏÉÅÌÉú:**
‚Ä¢ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§: ${statusEmoji.database}
‚Ä¢ Claude AI: ${statusEmoji.claude_api}  
‚Ä¢ Ï∂îÏ†Å ÏãúÏä§ÌÖú: ${statusEmoji.tracking_system}

${health.issues.length > 0 ? `‚ö†Ô∏è **Î∞úÍ≤¨Îêú Î¨∏Ï†ú:**\n${health.issues.map(issue => `‚Ä¢ ${issue}`).join('\n')}` : '‚úÖ Î™®Îì† ÏãúÏä§ÌÖúÏù¥ Ï†ïÏÉÅ ÏûëÎèô Ï§ëÏûÖÎãàÎã§!'}

‚è∞ Ï†êÍ≤Ä ÏãúÍ∞Ñ: ${new Date().toLocaleString('ko-KR')}`);

  } catch (error) {
    console.error('Health check error:', error);
    await ctx.reply(`‚ùå ÏÉÅÌÉú Ï†êÍ≤Ä Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${(error as Error).message}`);
  }
});

bot.command('maintenance', async (ctx) => {
  console.log('üîß /maintenance command received');
  
  try {
    const { recoverOrphanedSessions, performConsistencyCheck } = await import('../../src/utils/error-handler');
    
    const maintenanceMsg = await ctx.reply('üîß **ÏãúÏä§ÌÖú Ïú†ÏßÄÎ≥¥ÏàòÎ•º ÏãúÏûëÌï©ÎãàÎã§...**\n\n‚è≥ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ Î∞è Î≥µÍµ¨ Ï§ë...');
    
    // Perform maintenance tasks
    const [recovery, consistency] = await Promise.all([
      recoverOrphanedSessions(),
      performConsistencyCheck()
    ]);
    
    await ctx.api.editMessageText(
      ctx.chat.id,
      maintenanceMsg.message_id,
      `üîß **ÏãúÏä§ÌÖú Ïú†ÏßÄÎ≥¥Ïàò ÏôÑÎ£å**

üìä **ÏÑ∏ÏÖò Î≥µÍµ¨:**
‚Ä¢ Î≥µÍµ¨Îê®: ${recovery.recovered}Í∞ú
‚Ä¢ ÎßåÎ£åÎê®: ${recovery.expired}Í∞ú

üîç **Îç∞Ïù¥ÌÑ∞ ÏùºÍ¥ÄÏÑ± Í≤ÄÏÇ¨:**
‚Ä¢ ÏÇ¨Ïö©Ïûê Ï∂îÏ†Å ÏÉÅÌÉú ÏàòÏ†ï: ${consistency.fixed_user_tracking}Í∞ú
‚Ä¢ ÏÑ∏ÏÖò ÌÜµÍ≥Ñ ÏàòÏ†ï: ${consistency.fixed_session_stats}Í∞ú
‚Ä¢ Ï†ïÎ¶¨Îêú Î©îÏãúÏßÄ: ${consistency.cleaned_messages}Í∞ú

‚úÖ Ïú†ÏßÄÎ≥¥ÏàòÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!

‚è∞ ÏôÑÎ£å ÏãúÍ∞Ñ: ${new Date().toLocaleString('ko-KR')}`
    );

  } catch (error) {
    console.error('Maintenance error:', error);
    await ctx.reply(`‚ùå Ïú†ÏßÄÎ≥¥Ïàò Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${(error as Error).message}`);
  }
});

// Handle photo messages with editing capability
bot.on('message:photo', async (ctx) => {
  console.log('üì∏ Photo message received');

  // Skip if message is from the bot itself
  if (ctx.from?.is_bot || ctx.from?.id === ctx.me?.id) {
    return;
  }

  const caption = ctx.message.caption || '';

  // Check if user wants analysis (with caption like "Î∂ÑÏÑùÌï¥Ï§ò", "Î≠êÏïº", "ÏÑ§Î™ÖÌï¥Ï§ò" or with "ÎèÑÎπÑÏïº")
  const analysisKeywords = /(Î∂ÑÏÑù|ÏÑ§Î™Ö|Î≠êÏïº|Î≠êÏßÄ|ÏïåÎ†§Ï§ò|Î¨¥Ïóá|what|analyze|describe|explain)/i;
  const isDobbyRequest = caption.includes('ÎèÑÎπÑÏïº');

  if (isDobbyRequest || analysisKeywords.test(caption)) {
    console.log('üîç Photo analysis requested');

    try {
      // Get the largest photo
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      const file = await ctx.api.getFile(photo.file_id);

      if (!file.file_path) {
        await ctx.reply('‚ùå Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏùÑ Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
        return;
      }

      // Send processing message
      const processingMsg = isDobbyRequest
        ? await ctx.reply(`üßô‚Äç‚ôÄÔ∏è **ÎèÑÎπÑÍ∞Ä Ïù¥ÎØ∏ÏßÄÎ•º Î∂ÑÏÑùÌïòÍ≥† ÏûàÏäµÎãàÎã§!**

üëÅÔ∏è **ÎßàÎ≤ïÏùò ÎààÏúºÎ°ú ÏÇ¥Ìé¥Î≥¥Îäî Ï§ë...**
ü™Ñ ÎèÑÎπÑÏùò Î∂ÑÏÑù ÎßàÎ≤ï: Gemini Vision AI

‚ö° Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî...`)
        : await ctx.reply(`üîç **Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù Ï§ë...**

üëÅÔ∏è AIÍ∞Ä Ïù¥ÎØ∏ÏßÄÎ•º ÏÇ¥Ìé¥Î≥¥Í≥† ÏûàÏäµÎãàÎã§...
ü§ñ Î∂ÑÏÑù ÎèÑÍµ¨: Gemini Vision

‚è≥ Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî...`);

      // Download image
      const imageUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`;
      const imageResponse = await fetchWithTimeout(imageUrl, {}, 10000);
      const imageBuffer = await imageResponse.arrayBuffer();
      const imageBase64 = Buffer.from(imageBuffer).toString('base64');

      // Extract request from caption
      const userRequest = caption.replace(/ÎèÑÎπÑÏïº[,\s]*/i, '').trim();

      // Analyze image with Gemini Vision
      const analysisPrompt = userRequest
        ? `Please analyze this image and respond to the user's request in Korean: "${userRequest}". Provide a detailed, helpful response.`
        : `Please analyze this image in detail. Describe what you see, including:
1. Main subjects and objects
2. Setting/background
3. Colors and composition
4. Any text or notable details
5. Overall mood or atmosphere

Provide the analysis in Korean.`;

      console.log('üîç Analyzing image with Gemini Vision...');
      const startTime = Date.now();

      // Call Gemini Vision API with timeout
      const visionResponse = await fetchWithTimeout(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${GOOGLE_API_KEY}`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            contents: [{
              parts: [
                { text: analysisPrompt },
                {
                  inline_data: {
                    mime_type: 'image/jpeg',
                    data: imageBase64
                  }
                }
              ]
            }]
          })
        },
        15000
      );

      if (!visionResponse.ok) {
        throw new Error(`Gemini Vision API error: ${visionResponse.status}`);
      }

      const visionData = await visionResponse.json();
      const analysis = (visionData as any).candidates?.[0]?.content?.parts?.[0]?.text;

      if (!analysis) {
        throw new Error('No analysis received from Gemini Vision');
      }

      const processingTime = ((Date.now() - startTime) / 1000).toFixed(1);
      const cost = calculateGeminiVisionCost();

      console.log('üìù Image analysis completed');

      // Delete processing message
      await ctx.api.deleteMessage(ctx.chat.id, processingMsg.message_id);

      // Send analysis result
      const resultMessage = isDobbyRequest
        ? `üßô‚Äç‚ôÄÔ∏è **ÎèÑÎπÑÏùò Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù ÏôÑÎ£å!**

${analysis}

üí∞ ÎπÑÏö©: $${cost.toFixed(4)}
‚è±Ô∏è Ï≤òÎ¶¨ ÏãúÍ∞Ñ: ${processingTime}Ï¥à
üëÅÔ∏è Î∂ÑÏÑù ÎèÑÍµ¨: Gemini Vision AI

ÎèÑÎπÑÍ∞Ä ÎèÑÏõÄÏù¥ ÎêòÏóàÍ∏∞Î•º Î∞îÎûçÎãàÎã§! üßô‚Äç‚ôÄÔ∏è`
        : `üîç **Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù Í≤∞Í≥º**

${analysis}

üí∞ ÎπÑÏö©: $${cost.toFixed(4)}
‚è±Ô∏è Ï≤òÎ¶¨ ÏãúÍ∞Ñ: ${processingTime}Ï¥à
ü§ñ AI: Gemini Vision`;

      await ctx.reply(resultMessage, {
        reply_to_message_id: ctx.message.message_id
      });

      console.log('‚úÖ Image analysis sent successfully');

    } catch (error) {
      console.error('‚ùå Image analysis error:', error);

      const errorMessage = isDobbyRequest
        ? `üßô‚Äç‚ôÄÔ∏è **ÎèÑÎπÑÍ∞Ä Ïã§ÏàòÌñàÏäµÎãàÎã§...**

‚ùå Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù Ï§ë Ïò§Î•ò: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}

üí° Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî!`
        : `‚ùå **Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù Ïã§Ìå®**

Ïò§Î•ò: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}

üí° Îã§Ïãú ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî.`;

      await ctx.reply(errorMessage);
    }
  } else {
    // If no analysis requested, just acknowledge the photo
    await ctx.reply(`üì∏ ÏÇ¨ÏßÑÏùÑ Î∞õÏïòÏäµÎãàÎã§!

üí° **ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Í∏∞Îä•:**
‚Ä¢ Ï∫°ÏÖòÏóê "ÎèÑÎπÑÏïº, Î∂ÑÏÑùÌï¥Ï§ò" - Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù
‚Ä¢ Ï∫°ÏÖòÏóê "Î≠êÏïº?" ÎòêÎäî "ÏÑ§Î™ÖÌï¥Ï§ò" - Ïù¥ÎØ∏ÏßÄ ÏÑ§Î™Ö
‚Ä¢ ReplyÎ°ú "Ìé∏ÏßëÌï¥Ï§ò" - Ïù¥ÎØ∏ÏßÄ Ìé∏Ïßë
‚Ä¢ ReplyÎ°ú "Î∞∞Í≤Ω Î∞îÍøîÏ§ò" - Î∞∞Í≤Ω Î≥ÄÍ≤Ω`);
  }
});

// Handle ALL text messages - unified handler
bot.on('message:text', async (ctx) => {
  const text = ctx.message.text;
  const replyToMessage = ctx.message.reply_to_message;

  console.log(`üí¨ DEBUGGING - Message received: "${text}"`);
  console.log(`üí¨ DEBUGGING - From user: ${ctx.from?.first_name} (ID: ${ctx.from?.id})`);
  console.log(`üí¨ DEBUGGING - Is bot: ${ctx.from?.is_bot}`);
  console.log(`üí¨ DEBUGGING - Bot ID: ${ctx.me?.id}`);

  // üö® CRITICAL: Skip if message is from the bot itself to prevent infinite loops
  if (ctx.from?.is_bot || ctx.from?.id === ctx.me?.id) {
    console.log(`ü§ñ Skipping bot's own message: ${text}`);
    return;
  }

  // üö® CRITICAL: Skip if this is a command - let command handlers process them
  if (text.startsWith('/')) {
    console.log(`‚ö° Skipping command "${text}" - letting command handlers process it`);
    return;
  }


  // [NEW] Handle replies to photos for image editing
  if (ctx.message.reply_to_message?.photo) {
    const thinkingMessage = await ctx.reply('üñºÔ∏è **Ïù¥ÎØ∏ÏßÄ ÏàòÏ†ï ÏöîÏ≤≠ Ï†ëÏàò!**\n\nÏû†ÏãúÎßåÏöî, ÏõêÎ≥∏ Ïù¥ÎØ∏ÏßÄÎ•º Î∂ÑÏÑùÌïòÍ≥† ÏÉàÎ°úÏö¥ Í∑∏Î¶ºÏùÑ Ï§ÄÎπÑÌïòÍ≥† ÏûàÏñ¥Ïöî...');
    try {
      console.log(`üé® Image editing request received. Prompt: "${text}"`);

      const photo = ctx.message.reply_to_message.photo.sort((a, b) => b.width * b.height - a.width * a.height)[0];
      const file = await ctx.api.getFile(photo.file_id);
      const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path!}`;

      console.log(`üì• Downloading image from: ${fileUrl}`);
      const imageResponse = await fetch(fileUrl);
      if (!imageResponse.ok) throw new Error('TelegramÏóêÏÑú Ïù¥ÎØ∏ÏßÄÎ•º Îã§Ïö¥Î°úÎìúÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§.');
      const imageBuffer = await imageResponse.arrayBuffer();
      const imageData = Buffer.from(imageBuffer).toString('base64');
      const mediaType = imageResponse.headers.get('content-type') || 'image/jpeg';

      const visionPrompt = `Based on the user's request, analyze the provided image and generate a new, detailed, and creative prompt in English for an image generation model like Google Imagen. The new prompt should retain the original image's style and composition while seamlessly incorporating the user's requested changes.

User Request: "${text}"

Output Format: Respond ONLY with the ready-to-use English prompt for the image generation model. Do not include any other text, explanations, or quotation marks.`;

      await ctx.api.editMessageText(ctx.chat.id, thinkingMessage.message_id, 'üß† **AI ÎπÑÏ†Ñ Î∂ÑÏÑù Ï§ë...**\n\nClaude AIÍ∞Ä Ïù¥ÎØ∏ÏßÄÎ•º Î∂ÑÏÑùÌïòÍ≥† ÏÉàÎ°úÏö¥ ÌîÑÎ°¨ÌîÑÌä∏Î•º ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§.');
      const newImagePrompt = await callClaudeVisionAPI(visionPrompt, imageData, mediaType);

      console.log(`ü§ñ New Imagen prompt by Claude: "${newImagePrompt}"`);
      await ctx.api.editMessageText(ctx.chat.id, thinkingMessage.message_id, `üé® **ÏÉàÎ°úÏö¥ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ï§ë...**\n\nÌîÑÎ°¨ÌîÑÌä∏: "${newImagePrompt}"`);
      const imageResult = await generateImageWithImagen(newImagePrompt);
      const imageBufferNew = Buffer.from(imageResult.imageData, 'base64');

      await ctx.replyWithPhoto(new InputFile(imageBufferNew, `edited_${Date.now()}.png`), {
        caption: `üé® **Ïù¥ÎØ∏ÏßÄ ÏàòÏ†ï ÏôÑÎ£å!**\n\n**ÏõêÎ≥∏ ÏöîÏ≤≠:** "${text}"\n\n**AI ÌîÑÎ°¨ÌîÑÌä∏:** "${newImagePrompt}"`
      });
      await ctx.api.deleteMessage(ctx.chat.id, thinkingMessage.message_id);
      console.log('‚úÖ Image editing completed!');
    } catch (error) {
      await handleError(ctx, error as Error, 'Ïù¥ÎØ∏ÏßÄ ÏàòÏ†ï', thinkingMessage);
    }
    return;
  }
  
  // Check if this is a reply to a photo with editing request
  if (replyToMessage && 'photo' in replyToMessage && replyToMessage.photo) {
    console.log('üñºÔ∏è Reply to photo detected, checking for editing request...');

    // Check for Dobby-style editing request or direct editing keywords
    const isDobbyEdit = text.includes('ÎèÑÎπÑÏïº');
    const editingKeywords = /(Ìé∏Ïßë|ÏàòÏ†ï|Î≥¥Ï†ï|Î∞îÍøî|Î≥ÄÍ≤Ω|Ï°∞Ï†ï|Í∞úÏÑ†|ÎßåÎì§Ïñ¥|Ï∂îÍ∞Ä|Î∞∞Í≤Ω|ÏòàÏÅòÍ≤å|Î©ãÏßÄÍ≤å|enhance|edit|modify|adjust|add|create|change|background)/i;

    if (isDobbyEdit || editingKeywords.test(text)) {
      console.log('‚úèÔ∏è Image editing request detected!');
      
      try {
        // Get the largest photo
        const photo = replyToMessage.photo[replyToMessage.photo.length - 1];
        const file = await ctx.api.getFile(photo.file_id);
        
        if (!file.file_path) {
          await ctx.reply('‚ùå Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏùÑ Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
          return;
        }

        // Extract editing intent from text (remove "ÎèÑÎπÑÏïº" if present)
        const editRequest = text.replace(/ÎèÑÎπÑÏïº[,\s]*/i, '').trim();

        // Send processing message with Dobby personality if requested
        const processingMsg = isDobbyEdit
          ? await ctx.reply(`üßô‚Äç‚ôÄÔ∏è **ÎèÑÎπÑÍ∞Ä Ïù¥ÎØ∏ÏßÄÎ•º Ìé∏ÏßëÌïòÍ≥† ÏûàÏäµÎãàÎã§!**

üì∏ **ÏõêÎ≥∏ Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù Ï§ë**: ÎèÑÎπÑÍ∞Ä ÎßàÎ≤ïÏúºÎ°ú Î∂ÑÏÑùÌï©ÎãàÎã§...
‚úèÔ∏è **Ìé∏Ïßë ÏöîÏ≤≠**: "${editRequest}"
ü™Ñ **ÎèÑÎπÑÏùò ÎßàÎ≤ï**: Gemini Vision + Imagen AI

‚ö° ÎèÑÎπÑÍ∞Ä Ïó¥Ïã¨Ìûà ÏûëÏóÖ Ï§ëÏûÖÎãàÎã§...`)
          : await ctx.reply(`üé® **Ïù¥ÎØ∏ÏßÄ Ìé∏Ïßë Ï§ë...**

üì∏ **ÏõêÎ≥∏ Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù**: ÏßÑÌñâ Ï§ë
‚úèÔ∏è **Ìé∏Ïßë ÏöîÏ≤≠**: "${editRequest}"
ü§ñ **AI Ï≤òÎ¶¨**: Gemini Vision + Imagen

‚ö° Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî...`);

        // Download image
        const imageUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`;
        const imageResponse = await fetch(imageUrl);
        const imageBuffer = await imageResponse.arrayBuffer();
        const imageBase64 = Buffer.from(imageBuffer).toString('base64');

        // Analyze image with Gemini Vision with improved Korean prompt
        const analysisPrompt = `You are an expert image editing AI assistant. Analyze this image carefully and understand the user's editing request in Korean.

User's request: "${editRequest}"

Please:
1. Identify the main subjects, objects, and current background in the image
2. Understand what the user wants to change or improve
3. Create a detailed, professional image generation prompt in English that will:
   - Maintain the original subjects/people/objects
   - Apply the requested changes (background change, style improvements, etc.)
   - Enhance overall quality and aesthetics

Common Korean editing requests:
- "Î∞∞Í≤ΩÏùÑ [X]Î°ú Î≥ÄÍ≤ΩÌï¥Ï§ò" = Change background to [X]
- "Îçî ÏòàÏÅòÍ≤å/Î©ãÏßÄÍ≤å Ìé∏ÏßëÌï¥Ï§ò" = Make it more beautiful/cool
- "Ìï¥Î≥Ä/ÏÇ∞/ÎèÑÏãú Î∞∞Í≤ΩÏúºÎ°ú" = Beach/mountain/city background
- "[X]Î•º Ï∂îÍ∞ÄÌï¥Ï§ò" = Add [X] to the image

Provide a detailed English prompt for Imagen that captures all elements and requested changes.
Focus on: composition, lighting, colors, atmosphere, style, and specific changes requested.`;
        
        console.log('üîç Analyzing image with Gemini Vision...');

        const visionStartTime = Date.now();

        // Call Gemini Vision API with timeout
        const visionResponse = await fetchWithTimeout(
          `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${GOOGLE_API_KEY}`,
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              contents: [{
                parts: [
                  { text: analysisPrompt },
                  {
                    inline_data: {
                      mime_type: 'image/jpeg',
                      data: imageBase64
                    }
                  }
                ]
              }]
            })
          },
          15000 // 15-second timeout for Gemini Vision
        );

        if (!visionResponse.ok) {
          throw new Error(`Gemini Vision API error: ${visionResponse.status}`);
        }

        const visionData = await visionResponse.json();
        const analysis = (visionData as any).candidates?.[0]?.content?.parts?.[0]?.text;
        const visionProcessingTime = Date.now() - visionStartTime;
        const visionCost = calculateGeminiVisionCost();

        if (!analysis) {
          throw new Error('No analysis received from Gemini Vision');
        }

        console.log(`üìù Image analysis completed in ${visionProcessingTime}ms, generating enhanced version...`);
        console.log('üîç Gemini Vision Analysis:', analysis.substring(0, 300) + '...');

        // Generate enhanced image with Imagen using Gemini's analysis
        // The analysis from Gemini already contains a detailed prompt
        const enhancedPrompt = analysis;
        
        const imageResult = await generateImageWithImagen(enhancedPrompt, false);
        
        // Delete processing message
        await ctx.api.deleteMessage(ctx.chat.id, processingMsg.message_id);
        
        // Calculate total cost
        const totalCost = visionCost + imageResult.cost;

        // Send enhanced image with appropriate message
        const caption = isDobbyEdit
          ? `üßô‚Äç‚ôÄÔ∏è **ÎèÑÎπÑÍ∞Ä ÎßàÎ≤ïÏúºÎ°ú Ìé∏ÏßëÏùÑ ÏôÑÎ£åÌñàÏäµÎãàÎã§!**

‚úèÔ∏è **Ï£ºÏù∏ÎãòÏùò ÏöîÏ≤≠**: "${editRequest}"
ü™Ñ **ÎèÑÎπÑÏùò ÎßàÎ≤ï ÎèÑÍµ¨**:
- üëÅÔ∏è Gemini Vision (Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù): ${formatCost(visionCost)}
- üé® Google Imagen 4.0 (Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±): ${formatCost(imageResult.cost)}

üí∞ **Ï¥ù ÎπÑÏö©**: ${formatCost(totalCost)}
‚è±Ô∏è **Ï≤òÎ¶¨ÏãúÍ∞Ñ**: Î∂ÑÏÑù ${visionProcessingTime}ms + ÏÉùÏÑ± ${imageResult.processingTime}ms

‚ú® **ÎèÑÎπÑÏùò Ìé∏Ïßë Í≤∞Í≥ºÏûÖÎãàÎã§!**

ÎèÑÎπÑÎäî Ï£ºÏù∏ÎãòÏù¥ ÎßåÏ°±ÌïòÏãúÍ∏∏ Î∞îÎûçÎãàÎã§! üßô‚Äç‚ôÄÔ∏è`
          : `üé® **Ïù¥ÎØ∏ÏßÄ Ìé∏Ïßë ÏôÑÎ£å!**

‚úèÔ∏è **Ìé∏Ïßë ÏöîÏ≤≠**: "${editRequest}"
ü§ñ **AI Ï≤òÎ¶¨ ÏôÑÎ£å**:
- üëÅÔ∏è Î∂ÑÏÑù (Gemini Vision): ${formatCost(visionCost)}
- üé® ÏÉùÏÑ± (Google Imagen 4.0): ${formatCost(imageResult.cost)}

üí∞ **Ï¥ù ÎπÑÏö©**: ${formatCost(totalCost)}
‚è±Ô∏è **Ï≤òÎ¶¨ÏãúÍ∞Ñ**: Î∂ÑÏÑù ${visionProcessingTime}ms + ÏÉùÏÑ± ${imageResult.processingTime}ms

‚ú® **Ìé∏ÏßëÎêú Ïù¥ÎØ∏ÏßÄÏûÖÎãàÎã§!**`;

        await ctx.replyWithPhoto(new InputFile(Buffer.from(imageResult.imageData, 'base64')), {
          caption: caption
        });
        
        console.log('‚úÖ Image editing completed successfully!');
        
      } catch (error) {
        console.error('‚ùå Image editing error:', error);
        await ctx.reply(`‚ùå **Ïù¥ÎØ∏ÏßÄ Ìé∏Ïßë Ïã§Ìå®**

Ïò§Î•ò: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}

üí° **Îã§Ïãú ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî:**
- Ïù¥ÎØ∏ÏßÄÏóê replyÎ°ú "Ìé∏ÏßëÌï¥Ï§ò", "Î≥¥Ï†ïÌï¥Ï§ò", "Í∞úÏÑ†Ìï¥Ï§ò" Îì±ÏúºÎ°ú ÏöîÏ≤≠
- Íµ¨Ï≤¥Ï†ÅÏù∏ Ìé∏Ïßë ÎÇ¥Ïö©ÏùÑ Î™ÖÏãúÌïòÎ©¥ Îçî Ï¢ãÏäµÎãàÎã§`);
      }
      
      return; // Exit after handling image editing
    }
  }

  // Check for Dobby activation and other commands
  console.log(`üîç DEBUGGING - Checking Dobby activation for: "${text}"`);
  const dobbyCheck = isDobbyActivated(text);
  console.log(`üîç DEBUGGING - Dobby check result:`, dobbyCheck);
  
  // Check for tracking commands (Dobby-style commands)
  const trackingCommand = parseTrackingCommand(text, ctx);
  console.log(`üîç DEBUGGING - Tracking command result:`, trackingCommand);
  
  // Handle tracking commands if detected
  if (trackingCommand) {
    console.log(`üéØ Tracking command detected: ${trackingCommand.type}`);
    await handleTrackingCommand(trackingCommand, ctx);
    return;
  }

  if (dobbyCheck.activated) {
    console.log(`üßô‚Äç‚ôÄÔ∏è DEBUGGING - Dobby activated! Command: ${dobbyCheck.command}, Content: "${dobbyCheck.content}"`);

    if (dobbyCheck.command === 'image') {
      // Handle Dobby image generation
      if (!dobbyCheck.content) {
        await ctx.reply(`üßô‚Äç‚ôÄÔ∏è **ÎèÑÎπÑÍ∞Ä Ï§ÄÎπÑÎêòÏóàÏäµÎãàÎã§!**

üé® **Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± ÏÇ¨Ïö©Î≤ï:**
‚Ä¢ "ÎèÑÎπÑÏïº, Í∑ÄÏó¨Ïö¥ Í∞ïÏïÑÏßÄ Í∑∏Î†§Ï§ò"
‚Ä¢ "ÎèÑÎπÑÏïº, ÎØ∏ÎûòÏ†ÅÏù∏ Î°úÎ¥á Í∑∏Î†§Ï§ò"
‚Ä¢ "ÎèÑÎπÑÏïº, ÏïÑÎ¶ÑÎã§Ïö¥ ÌíçÍ≤Ω Í∑∏Î¶º Í∑∏Î†§Ï§ò"

‚ú® Ïñ¥Îñ§ Í∑∏Î¶ºÏùÑ Í∑∏Î†§ÎìúÎ¶¥ÍπåÏöî?`);
        return;
      }

      console.log(`üé® Dobby image generation: "${dobbyCheck.content}"`);

      // Get dynamic processing message
      const processingMsg = await getSystemMessage('dobby_processing_image', {
        user_input: dobbyCheck.content
      });
      
      const generatingMessage = await ctx.reply(processingMsg);

      try {
        const imageResult = await generateImageWithImagen(dobbyCheck.content, true, ctx.from?.id?.toString(), ctx.chat?.id?.toString());

        // Create buffer from base64
        const imageBuffer = Buffer.from(imageResult.imageData.replace(/^data:image\/[a-z]+;base64,/, ''), 'base64');

        // Get dynamic success message with cost information
        const successMsg = await getSystemMessage('dobby_success_image', {
          user_input: dobbyCheck.content,
          cost: formatCost(imageResult.cost),
          processing_time: imageResult.processingTime,
          timestamp: new Date().toLocaleString('ko-KR')
        });

        // Send image directly from buffer
        await ctx.replyWithPhoto(new InputFile(imageBuffer, `dobby_${Date.now()}.png`), {
          caption: `${successMsg}

üí∞ **ÎπÑÏö©**: ${formatCost(imageResult.cost)}
‚è±Ô∏è **Ï≤òÎ¶¨ÏãúÍ∞Ñ**: ${imageResult.processingTime}ms
üé® **ÎèÑÍµ¨**: Google Imagen 4.0`
        });

        // Delete generating message
        await ctx.api.deleteMessage(ctx.chat.id, generatingMessage.message_id);

        console.log('‚úÖ Dobby image generation successful!');

      } catch (error) {
        console.error('Dobby image generation error:', error);

        await ctx.api.editMessageText(
          ctx.chat.id,
          generatingMessage.message_id,
          `üßô‚Äç‚ôÄÔ∏è **ÎèÑÎπÑÍ∞Ä Ïã§ÏàòÌñàÏäµÎãàÎã§...**

‚ùå Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ï§ë Ïò§Î•ò: ${(error as Error).message}

üòî ÎèÑÎπÑÎäî Ïã§Ìå®Î•º Ïö©ÏÑúÎ∞õÏßÄ Î™ªÌï©ÎãàÎã§...
üí° Ïû†Ïãú ÌõÑ Îã§Ïãú ÎßêÏîÄÌï¥Ï£ºÏãúÎ©¥ Îçî Ïó¥Ïã¨Ìûà ÌïòÍ≤†ÏäµÎãàÎã§!`
        );
      }

    } else if (dobbyCheck.command === 'help') {
      // Handle Dobby help command
      console.log(`‚ùì Dobby help request: "${dobbyCheck.content}"`);

      try {
        const helpMessage = await getHelpMessage();
        await ctx.reply(`üßô‚Äç‚ôÄÔ∏è **ÎèÑÎπÑÍ∞Ä ÏÇ¨Ïö©Î≤ïÏùÑ ÏïåÎ†§ÎìúÎ¶ΩÎãàÎã§!**

${helpMessage}

üè† Ï£ºÏù∏ÎãòÏùÑ ÏúÑÌï¥ Ïñ∏Ï†úÎì†ÏßÄ ÎèÑÏõÄÏùÑ ÎìúÎ¶¥ Ï§ÄÎπÑÍ∞Ä ÎêòÏñ¥ÏûàÏäµÎãàÎã§!`);

        console.log('‚úÖ Dobby help message sent successfully!');

      } catch (error) {
        console.error('Dobby help error:', error);
        await ctx.reply(`üßô‚Äç‚ôÄÔ∏è **ÎèÑÎπÑÍ∞Ä Ïã§ÏàòÌñàÏäµÎãàÎã§...**

‚ùå ÎèÑÏõÄÎßêÏùÑ Í∞ÄÏ†∏Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.

üí° /help Î™ÖÎ†πÏñ¥Î•º ÏÇ¨Ïö©ÌïòÏãúÍ±∞ÎÇò Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî!`);
      }

    } else if (dobbyCheck.command === 'ask') {
      // Handle Dobby Q&A
      console.log(`ü§î Dobby Q&A: "${dobbyCheck.content}"`);

      // Get dynamic processing message
      const processingMsg = await getSystemMessage('dobby_processing_qa', {
        question: dobbyCheck.content
      });
      
      const thinkingMessage = await ctx.reply(processingMsg);

      try {
        const answerResult = await answerQuestion(dobbyCheck.content, true, ctx.from?.id?.toString(), ctx.chat?.id?.toString());

        // Delete thinking message and send answer
        await ctx.api.deleteMessage(ctx.chat.id, thinkingMessage.message_id);

        // Get dynamic success message
        const successMsg = await getSystemMessage('dobby_success_qa', {
          question: dobbyCheck.content,
          answer: answerResult.text,
          cost: formatCost(answerResult.cost),
          processing_time: answerResult.processingTime,
          timestamp: new Date().toLocaleString('ko-KR')
        });

        await ctx.reply(`${successMsg}

üí∞ **ÎπÑÏö©**: ${formatCost(answerResult.cost)}
‚è±Ô∏è **Ï≤òÎ¶¨ÏãúÍ∞Ñ**: ${answerResult.processingTime}ms
üî§ **ÌÜ†ÌÅ∞**: ${answerResult.tokenUsage.input} ‚Üí ${answerResult.tokenUsage.output}
üß† **AI**: Claude 3.5 Sonnet`);

        console.log('‚úÖ Dobby Q&A successful!');

      } catch (error) {
        console.error('Dobby Q&A error:', error);

        await ctx.api.editMessageText(
          ctx.chat.id,
          thinkingMessage.message_id,
          `üßô‚Äç‚ôÄÔ∏è **ÎèÑÎπÑÍ∞Ä Ïã§ÏàòÌñàÏäµÎãàÎã§...**

‚ùå ÎãµÎ≥Ä Ï§ë Ïò§Î•ò: ${(error as Error).message}

üòî ÎèÑÎπÑÎäî ÏïÑÏßÅ Î™®Î•¥Îäî Í≤ÉÏù¥ ÎßéÏäµÎãàÎã§...
üí° Îã§Î•∏ Î∞©ÏãùÏúºÎ°ú Î¨ºÏñ¥Î¥êÏ£ºÏãúÎ©¥ Îçî Ïó¥Ïã¨Ìûà ÌïòÍ≤†ÏäµÎãàÎã§!`
        );
      }
    }

    return; // Dobby handled the message, skip other processing
  }

  // Do not respond to regular messages without "ÎèÑÎπÑÏïº" keyword
  // Only slash commands and messages with "ÎèÑÎπÑÏïº" should trigger responses
  console.log(`üí≠ Regular message (not Dobby command): "${text}" - no response`);
});

// Debug middleware - log ALL messages
bot.use(async (ctx, next) => {
  console.log('üîç DEBUG - Message type:', ctx.message?.text ? 'text' : ctx.message?.photo ? 'photo' : 'other');
  console.log('üîç DEBUG - Message content:', ctx.message?.text || '[non-text]');
  console.log('üîç DEBUG - From:', ctx.from?.first_name, '(', ctx.from?.id, ')');
  await next();

});

// Error handling
bot.catch((err) => {
  console.error('Production bot error:', err);
});

// Create webhook callback
const webhookHandler = webhookCallback(bot, 'std/http');

// Netlify Functions handler
export const handler: Handler = async (event: HandlerEvent, _context: HandlerContext) => {
  console.log('üåê WEBHOOK ENTRY POINT - Received request');
  console.log('üåê Method:', event.httpMethod);
  console.log('üåê Body:', event.body);
  console.log('üåê Headers:', JSON.stringify(event.headers, null, 2));


  try {
    if (event.httpMethod !== 'POST') {
      return { statusCode: 405, body: JSON.stringify({ error: 'Method not allowed' }) };
    }

    const request = new Request('https://example.com/webhook', {
      method: 'POST',
      headers: { 'content-type': 'application/json', ...event.headers },
      body: event.body
    });

    const response = await webhookHandler(request);
    console.log('‚úÖ Webhook processed successfully');

    return {
      statusCode: response.status,
      headers: { 'Content-Type': 'application/json' },
      body: await response.text()
    };
  } catch (error) {
    console.error('‚ùå Webhook processing error:', error);
    return {
      statusCode: 500,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ error: 'Internal server error', message: (error as Error).message })
    };
  }
};
